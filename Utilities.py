'''   
This file cointains some uitility functions that are used in Run_Models.ipynb and Models.py
'''
from sklearn import metrics
from sklearn.model_selection import train_test_split
import numpy as np
from tqdm import tqdm
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix
from sklearn import svm
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import RFECV
from sklearn.preprocessing import MinMaxScaler
from sklearn.feature_selection import VarianceThreshold
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.metrics import RocCurveDisplay
from sklearn.model_selection import cross_val_score
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM, Dropout
from keras.layers.embeddings import Embedding
from keras.preprocessing import sequence
import tensorflow as tf
import keras as K
from sklearn.model_selection import StratifiedKFold
from keras.layers import Dense, Conv1D, Flatten, MaxPooling1D
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix


idx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54]
plt.rcParams["figure.figsize"] = (14, 7)


def splitlist(list):
    list1 = []
    list2 = []
    for i in list:
        list1.append(i[0])
        list2.append(i[1])
    return list1, list2


def merge_shuffle(list1, list2):
    list = []
    for i in range(len(list1)):
        list.append(list1[i])
        list.append(list2[i])
    return list


def readfile(file):
    f = open(file, "r")
    result = []
    c = 0
    for i in f:
        if c <= 20000:
            c += 1
            list = []
            line = i[1:-3].split(", [")
            list.append(int(line[0]))
            temp = []
            for j in line[1].split(", "):
                if j.isdigit():
                    temp.append(int(j))
                else:
                    temp.append(float(j))
            list.append(temp)
            result.append(list)
    f.close()
    return result


def selectfeatures(features, indexs):
    result = []
    length = len(features[0])
    for w in features:
        temp = []
        for i in range(1, len(w)+1):
            if i in indexs:
                temp.append(w[i-1])
        result.append(temp)
    return result


def NPV(conf_mat):
    TN = conf_mat[0][0]
    FP = conf_mat[0][1]
    FN = conf_mat[1][0]
    TP = conf_mat[1][1]
    NPV = TN / (TN + FN)
    return NPV


def PPV(conf_mat):
    TN = conf_mat[0][0]
    FP = conf_mat[0][1]
    FN = conf_mat[1][0]
    TP = conf_mat[1][1]
    PPV = TP / (TP + FP)
    return PPV


def Scale():
    global X_train, X_test
    X_train_svm, X_test_svm = X_train, X_test
    scaler = MinMaxScaler()
    scaler.fit(X_train)
    X_train_svm = scaler.transform(X_train)
    X_test_svm = scaler.transform(X_test)
    return X_train_svm, X_test_svm


def notglobalscale(X_train):
    X_train_svm = X_train
    scaler = MinMaxScaler()
    scaler.fit(X_train)
    X_train_svm = scaler.transform(X_train)
    return X_train_svm


def Kbest(X_train_svm, labels, n):
    sel = SelectKBest(chi2, k=n)
    sel.fit(X_train_svm, labels)
    X_train_svm = sel.transform(X_train_svm)
    return X_train_svm


def no_null(features, labels):
    features_null = []
    labels_null = []
    for i in range(len(features)):
        if features[i][6] > 0:
            features_null.append(features[i])
            labels_null.append(labels[i])
    features_null = np.array(features_null)
    labels_null = np.array(labels_null)
    return features_null, labels_null


def not_null(features, labels):
    features_not_null = []
    labels_not_null = []
    for i in range(len(features)):
        if sum(features[i]) != 0:
            features_not_null.append(features[i])
            labels_not_null.append(labels[i])
    features_not_null = np.array(features_not_null)
    labels_not_null = np.array(labels_not_null)
    return features_not_null, labels_not_null
